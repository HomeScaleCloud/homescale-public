name: "CI"
permissions:
  actions: read
  contents: read
  packages: write
  id-token: write
  issues: write
  pull-requests: write
  security-events: write

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}

jobs:
  pre-commit:
    name: "pre-commit"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Setup Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c #v6.0.0
        with:
          python-version: "3.x"
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd #v3.1.2
      - uses: pre-commit/action@2c7b3805fd2a0fd8c1884dcaebf91fc102a13ecd # v3.0.1
      - uses: pre-commit-ci/lite-action@5d6cc0eb514c891a40562a58a8e71576c5c7fb43 # v1.1.0
        if: always()

  trivy:
    name: Trivy Code Scan
    needs: pre-commit
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # 0.33.1
        with:
          scan-type: 'config'
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '0'
          severity: 'CRITICAL,HIGH'
      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@17783bfb99b07f70fae080b654aed0c514057477 # v4.30.9
        with:
          sarif_file: 'trivy-results.sarif'

  discover:
    name: "Discover build targets"
    needs: trivy
    runs-on: ubuntu-latest
    outputs:
      docker: ${{ steps.set.outputs.docker }}
      helm: ${{ steps.set.outputs.helm }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Find Docker & Helm targets
        id: set
        shell: bash
        run: |
          set -euo pipefail
          # Find Dockerfiles under apps/** (supports apps/foo/src/Dockerfile or apps/foo/Dockerfile)
          docker_json='[]'
          while IFS= read -r df; do
            dir="$(dirname "$df")"
            base="$(basename "$dir")"
            if [[ "$base" == "src" ]]; then
              name="$(basename "$(dirname "$dir")")"
              context="$dir"
            else
              name="$(basename "$dir")"
              context="$dir"
            fi
            docker_json="$(jq --arg n "$name" --arg c "$context" '. + [{name:$n, context:$c}]' <<<"$docker_json")"
          done < <(find apps -type f -iname Dockerfile | sort)

          # Find Helm charts as any apps/*/Chart.yaml (and apps/*/charts/<subchart>/Chart.yaml ignored)
          helm_json='[]'
          while IFS= read -r chart; do
            chart_dir="$(dirname "$chart")"
            # app name is the directory containing Chart.yaml
            name="$(basename "$chart_dir")"
            helm_json="$(jq --arg n "$name" --arg p "$chart_dir" '. + [{name:$n, path:$p}]' <<<"$helm_json")"
          done < <(find apps -maxdepth 2 -type f -name Chart.yaml | sort)
          echo "docker=$(jq -c . <<<"$docker_json")" >> "$GITHUB_OUTPUT"
          echo "helm=$(jq -c . <<<"$helm_json")" >> "$GITHUB_OUTPUT"

  build-docker:
    name: "Build - Docker - ${{ matrix.name }}"
    needs: [discover]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.discover.outputs.docker) }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Login to ghcr (Docker)
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get image tags
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          images: ghcr.io/homescalecloud/${{ matrix.name }}
          tags: |
            type=raw,value=${{ github.sha }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: ${{ matrix.context }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64

      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # 0.33.1
        with:
          image-ref: ghcr.io/homescalecloud/${{ matrix.name }}:${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  build-helm:
    name: "Build - Helm â€“ ${{ matrix.name }}"
    needs: [discover, build-docker]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.discover.outputs.helm) }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Set up Helm
        uses: azure/setup-helm@1a275c3b69536ee54be43f2070a358922e12c8d4 # v4.3.1
        with:
          version: v3.18.6
      - name: Login to ghcr (Docker)
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to ghcr (Helm OCI)
        shell: bash
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ghcr.io --username "${{ github.actor }}" --password-stdin
      - name: Get Helm dependencies
        run: |
          helm dependency build "${{ matrix.path }}"
      - name: Package Helm chart
        run: |
          helm package "${{ matrix.path }}"
      - name: Upload chart artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: helm-${{ matrix.name }}
          path: ./${{ matrix.name }}-*.tgz
          if-no-files-found: error
      - name: Push Helm chart (main only)
        if: github.ref == 'refs/heads/main'
        shell: bash
        run: |
          # Derive version without needing yq installed
          CHART_VERSION="$(helm show chart "${{ matrix.path }}" | awk '/^version:/{print $2}')"
          helm push "${{ matrix.name }}-${CHART_VERSION}.tgz" oci://ghcr.io/homescalecloud/helm

  deploy-terraform:
    name: "Deploy - Terraform"
    runs-on: ubuntu-latest
    needs:
      - build-docker
      - build-helm
    defaults:
      run:
        shell: bash
        working-directory: ./infra/terraform
    env:
      TF_IN_AUTOMATION: "true"
      TF_INPUT: "false"
      TF_VAR_op_service_account_token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Import Secrets
        uses: 1password/load-secrets-action@13f58eec611f8e5db52ec16247f58c508398f3e6 # v3.0.0
        with:
          export-env: true
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          TF_TOKEN_app_terraform_io: op://github-actions/terraform-cloud/credential
          TS_ID: op://github-actions/tailscale/username
          TS_SECRET: op://github-actions/tailscale/password  # pragma: allowlist secret
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
      - name: Initialize
        id: init
        run: terraform init
      - name: Validate
        id: validate
        run: terraform validate
      - name: Connect to Tailscale
        uses: tailscale/github-action@6cae46e2d796f265265cfcf628b72a32b4d7cade #v3
        with:
          oauth-client-id: $TS_ID
          oauth-secret: $TS_SECRET
          tags: tag:github-actions
      - name: Plan
        id: plan
        run: terraform plan -out=tfplan
      - name: Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve tfplan
